# Các câu lệnh cơ bản trong Linux
### 1. Lệnh `man` (manual)
- Lệnh man là công cụ để hiển thị trang hướng dẫn (manual page) cho các lệnh, cho các lời gọi hệ thống khác nhau, và thêm các tiện ích khác

- Cấu trúc lệnh:
  ```
  man [options] [command]
  ```
Ví dụ 
 ```
 man ls
 ```
   ![alt text](<../Images/Screenshot 2024-05-16 083429.png>)

- Các thao tác với manual page

  + Spacebar: chuyển tới một sang tiếp theo
  
  + Enter: chuyển tới một dòng tiếp theo
  
  + q: thoát khỏi manual page

  + ctrl+b: quay lại trang trước đó     

- Các thành phần ở trong manual page
   
  + Name: Cung cấp tên và mô tả ngắn gọn về câu lệnh
  
  + Synopsis: Cung cấp cú pháp của câu lệnh giúp người dùng thực hiện chúng
 
  + Description: Cung cấp cho người dùng những giải thích chi tiết về câu lệnh đang sử dụng 
 
  + Options: Liệt kê các tuỳ chọn có sẵn của một câu lệnh và mô tả chúng

  + Examples: Cung cấp các ví dụ minh hoạ để thực hiện câu lệnh
 
  + See Also: Cung cấp thêm các thông tin về câu lệnh đang sử dụng 

- Một trang hướng dẫn có thể được xếp vào các phần sau:
 
  + (1): Chương trình thực thi hoặc lệnh shell

    Ví dụ như các lệnh: ls, mkdir, cp.....  

  + (2): Lời gọi hệ thống
  
    Ví dụ như các lệnh: open(), read(),.....

  + (3): Lời gọi hàm được định nghĩa trong các thư viện

    Ví dụ: Khi ta gõ câu lệnh  
    ```
    man 3 printf 
    ```
    Thì bạn sẽ được cung cấp hướng dẫn chi tiết về các sử dụng hàm printf() ở trong thư viện C 

  + (4): Các loại file đặc biệt và các thiết bị trong hệ thống

    Ví dụ: Khi ta gõ câu lệnh
    ```
    man 4 port
    ```
    Thì bạn sẽ được cung cấp hướng dẫn chi tiết về port

  + (5) :Định dạng và quy ước về tệp

    Ví dụ Khi gõ câu lệnh:
    ```
    man 5 passwd 
    ```
    Thì sẽ xuất hiện những mô tả của file passwd ở trong /etc/passwd

  + (6) :Trò chơi
  
  + (7) :Khác (bao gồm các gói và quy ước vĩ mô), ví dụ: man(7)
 
  + (8) :Lệnh quản trị hệ thống (thường chỉ dành cho root)
  
  + (9) :Kernel routines [Không chuẩn]     

- Các tuỳ chọn của câu lệnh `man`

|Options      | Mô tả chi tiết | 
|-------------|-------------|
| `man [command]`  | Hiển thị hướng dẫn cho một lệnh chỉ định trước  | 
| -f, whatis | Hiển thị mô tả ngắn ngọn của một dòng lệnh |
| -k, apropos (Display Appropriate Commands) | Tìm kiếm các lệnh liên quan đến một từ khoá nhất định |
| -a, –all | Hiển thị tất cả các trang phù hợp với câu lệnh được chỉ định |
| -w       | Dùng để hiển thị đường dẫn của trang hướng dẫn | 

- Thực hiện các câu lệnh:
 
 + Lệnh với SECTION-NUM
  
 ```
 man [SECTION-NUM] [COMMAND NAME]
 ```
 Ví dụ 

 ``` 
 man 2 intro 
 ```
 Lệnh này cung cấp phần giới thiệu về lời gọi hệ thống (system call)

 ![alt text](<../Images/Screenshot 2024-05-16 100739.png>)

 + Lệnh với tuỳ chọn -f và whatis
  ```
  man -f [COMMAND NAME]
  ```
   ![alt text](<../Images/Screenshot 2024-05-16 101119.png>) 

  ```
  whatis [COMMAND NAME]
  ```
   ![alt text](<../Images/Screenshot 2024-05-16 101249.png>)

   Ở đây dùng câu lệnh 
   ```
   man -f ls
   ```

 + Lệnh với tuỳ chọn -k và apropos:

  ```
  man -k [COMMAND NAME]
  ```
   ![alt text](<../Images/Screenshot 2024-05-16 101546.png>)
 
  ```
  apropos [COMMAND NAME]
  ```
   ![alt text](<../Images/Screenshot 2024-05-16 101852.png>) 
   
### 2.Lệnh `pwd` 
- Lệnh này có tác dụng cho biết đường dẫn mà thư mục mình đang làm việc
 
   ![alt text](<../Images/Screenshot 2024-05-14 083909.png>)

 Ví dụ hiện tại thư mục đang làm việc là /home/huyhx/

- Cấu trúc lệnh:
 > pwd  
### 3.Lệnh `ls`
- Lệnh này có tác dụng liệt kệ nội dung có trong thư mục
 
   ![alt text](<../Images/Screenshot 2024-05-14 084348.png>)

- Cấu trúc lệnh:
 > ls [options] [path] 
  
 Options:
 -l: liệt kê chi tiết.

 -a: liệt kê tất cả các file ẩn

 -lrt: Hiển thị các lệnh được sắp xếp vào ngày sửa đổi. Bạn sẽ thấy các tệp được sửa đổi gần đây nhất trong danh sách.

   ![alt text](<../Images/Screenshot 2024-05-14 085229.png>)

Liệt kê chi tiết các file ẩn trong thư mục /home/huyhx

### 4.Lệnh `cd`
- Lệnh này có tác dụng dùng để di chuyển thư mục làm việc 

- Cấu trúc lệnh:
  > cd [Path]

 cd .. Chuyển lên thư mục cấp cao hơn (cha)

 cd Chuyển về thư mục home

 cd ~ Chuyển về thư mục home 

- Ví dụ muốn di chuyển đến thư mục /etc ta dùng câu lệnh 
 > cd /etc

  ![alt text](<../Images/Screenshot 2024-05-14 091136.png>)

### 5.Lệnh `cp` (copy file and directories)
- Lệnh này có tác dụng dùng để sao chép file và các thư mục 

- Thực hiện copy file1 sang file2  
  ```
  cp [options] file1 file2
  ``` 
  Ví dụ copy nội dung file `abc.txt` vào file `xyz.txt`

  ```
  cp abc.txt xyz.txt
  ```
   ![alt text](<../Images/Screenshot 2024-05-16 105340.png>)

- Thực hiện copy file1 file2 vào thư mục dir1. Thư mục dir1 phải có từ trước 
  ```
  cp file1 file2 dir1
  ``` 

  Ví dụ copy nội dung file `abc.txt` và file `xyz.txt` vào thư mục dir1

   ![alt text](<../Images/Screenshot 2024-05-16 110715.png>)

- Thực hiện copy thư mục dir1 vào thư mục dir2. Thư mục dir2 phải tồi tại
  ```
  cp dir1/* dir2
  ```

  Ví dụ copy nội dung của thư mục dir1 vào thư mục dir2

  ![alt text](<../Images/Screenshot 2024-05-16 111358.png>)


 Options:

  -i(interactive): Hỏi khi ghi dè lên file
   
    Ví dụ:
    ```
    cp -i abc.txt xyz.txt
    ```
    Khi bạn ấn `yes` thì yêu cầu được thực hiện

   ![alt text](<../Images/Screenshot 2024-05-16 110039.png>)

  -r (recursive): có nghĩa là đệ quy. Tức là khi sao chép thư mục dir1 sang thư mục dir2 thì nó sẽ được sao chép toàn bộ các thư mục con cũng như  các tệp tin trong thư mục dir1

  -u (update): Khi sao chép tập tin từ thư mục này sang thư mục khác, chỉ sao chép các tập tin không tồn tại hoặc mới hơn các tập tin tương ứng hiện có trong thư mục đích.

  -v (verbose): Hiển thị chi tiết khi thực hiện sao chép:

   ![alt text](<../Images/Screenshot 2024-05-16 112958.png>)

  -a (archive): Sao chép mọi thứ bao gồm cả nội dung và mọi quyền sở hữu của thư mục gốc

**CHÚ Ý**: Khi copy thư mục thì cần yêu cầu có option -r hoặc -a  


### 6.Lệnh `mv` (Move and Rename file)

- Lệnh này có tác dụng dùng để đổi tên hoặc di chuyển thư mục hoặc file từ nơi này sang nơi khác.

- Thực hiện di chuyển nội dung file1 vào file2 và khi đó file1 biến mất sau khi thực hiện câu lệnh
  
  ```
  mv file1 file2
  ```

  Ví dụ như thực hiện chuyển nội dung của file `abc.txt` vào `xyz.txt`

   ![alt text](<../Images/Screenshot 2024-05-16 140435.png>)

- Di chuyển một hay nhiều file đến một thư mục 

  ```
  mv file1 file2 .... dir
  ```

  Ví dụ như thực hiện di chuyển file `abc.txt` và `xyz.txt` vào dir3

   ![alt text](<../Images/Screenshot 2024-05-16 141059.png>)

- Di chuyển nhiều hay một thư mục vào một thư mục

   ```
   mv dir1 dir2..... dir
   ```

  Ví dụ như thực hiện chuyển thư mục dir1 dir2 vào dir3

    ![alt text](<../Images/Screenshot 2024-05-16 141848.png>)


  - Các Options:

    + -i (interactive): Trước khi thực hiện ghi đè một tập tin thì cho người dùng xác nhận

     ![alt text](<../Images/Screenshot 2024-05-16 143014.png>) 

    + -u (update): Khi di chuyển tập tin từ thư mục này sang thư mục khác, chỉ di chuyển các tập tin không tồn tại hoặc mới hơn
      các tập tin tương ứng hiện có trong thư mục đích

    + -v (verbose): Hiển thị thông báo đầy đủ thông tin khi thực hiện di chuyển.   


### 7.Lệnh `mkdir` (Create Directories)
-  Lệnh mkdir: dùng để tạo thư mục

- Tạo một hay nhiều thư mục 

  ```
  mkdir dir1 dir2....
  ```

  Ví dụ tạo thư mục dir4 và dir5
   
   ![alt text](<../Images/Screenshot 2024-05-16 145720.png>)
   
- Tạo một thư mục con trong một thư mục cha

  ```
  mkdir -p dir1/dir2
  ```

   ![alt text](<../Images/Screenshot 2024-05-16 150302.png>)
  
### 8.Lệnh `rm` (Remove Files and Directories) 
- Lệnh rm: dùng để xoá file/thư mục

- Để xoá một file hoặc một thư mục thì ta dùng câu lệnh:

 ```
 rm [options] item...
 ```
  item có thể là một file hoặc nhiều file hoặc nhiều thư mục

 Ví dụ để xoá hai file `abc.txt` và `xyz.txt`:

  ![alt text](<../Images/Screenshot 2024-05-16 151115.png>)


 Các options:
 + -d (directory): dùng để xoá thư mục rỗng

    ![ alt text ](<../Images/Screenshot 2024-05-16 152024.png>)

 +  -r(recursive): dùng để xoá các thư mục mà bên trong nó có chưa có thư mục con hoặc cái file bên trong thư mục đó 
  
    ![alt text](<../Images/Screenshot 2024-05-16 153048.png>) 
  
 +  -f (force): Dùng để xoá các file và tập tin mà không nhắc người dùng nó trái ngược với --interactive

### 9.Lệnh `touch`
- Lệnh này có tác dụng để tạo một file trống hay để thay đổi timestamp(dấu thời gian) của một thư mục hay một tập tin
- Các timestamp bao gồm:

  + access time: Thời gian lần cuối tập tin được truy cập
   
  + modify time: Thời gian lần cuối tập tin được sửa đổi
   
  + change time: Thời gian lần cuối cùng metadata của tệp tin hoặc 
  thư mục (như quyền, chủ sở hữu) được thay đổi.   

- Tạo một hoặc file trống:

  + Câu lệnh 

   ```
   touch <file1> <file2>
   ```
   ![alt text](<../Images/Screenshot 2024-05-20 140051.png>)

- Các Options:
 
  + Thay đổi thời gian access time của file (-a)
   ```
   touch -a file1
   ```
   
   ![alt text](<../Images/Screenshot 2024-05-20 140301.png>)

  + Thay đổi thời gian chỉnh sửa file (-m)

  + Tạo 1 tệp tin với dấu thời gian nhất định hoặc thay đổi dấu thời gian của 1 tệp đã có.

   ``` 
   touch -t YYYYMMDDHHMM <filename>
   ```
   ![alt text](<../Images/Screenshot 2024-05-20 141315.png>)

### 10. Lệnh `echo`
- Dùng để hiển thị một dòng văn bản

 ```
 echo <string>
 ```
   ![alt text](<../Images/Screenshot 2024-05-20 143022.png>)

- Các Options

  + Dùng để liệt kê các file thư muc

   ```
   echo *
   ```
    ![alt text](<../Images/Screenshot 2024-05-20 144237.png>)

  + Ngăn xuóng dòng khi in

   ```
   echo -n <string>
   ```
    ![alt text](<../Images/Screenshot 2024-05-20 144624.png>)

  + Với option `-e`, nó cho phép ta xác định sự liên tục của văn bản đầu vào. `e - escape`

  + `\b: backspace` dùng để xoá kí tự trưỚc đó:
   
     ![alt text](<../Images/Screenshot 2024-05-20 145415.png>) 
     
  + `\c` cắt văn bản và không xuống dòng
     
     ![alt text](<../Images/Screenshot 2024-05-20 145619.png>)

  + `\n: new line` xuống dòng

     ![alt text](<../Images/Screenshot 2024-05-20 145721.png>)  

  + `\t: tab` tạo khoảng cách giữa cái chữ:
   
     ![alt text](<../Images/Screenshot 2024-05-20 145954.png>)

  + `\r` trả về văn bản sau đó

     ![alt text](<../Images/Screenshot 2024-05-20 150243.png>)  

### 11. Lệnh `cat`
- Cat: concatenate (tiếp nối)
 
- Lệnh này có tác dụng dùng để nối các tập tin, xem, tạo nội dung của các tập tin
  
- Xem nội dung của file:

  ```
  cat <file>
  ```

   ![alt text](<../Images/Screenshot 2024-05-20 151634.png>)

- Nối nôi dung của nhiều tệp và in ra

  ```
  cat <file1> <file2>
  ```

   ![alt text](<../Images/Screenshot 2024-05-20 151823.png>)

- Xem nôi dung file với đánh số dòng `-n: number`

  ``` 
  cat -n <file>
  ```

   ![alt text](<../Images/Screenshot 2024-05-20 152118.png>)

- Tạo file 

  ```
  cat >newfile
  ```

   ![alt text](<../Images/Screenshot 2024-05-20 152328.png>)

- Sao chép file

  ```
  cat s_filename > d_filename
  ```

   ![alt text](<../Images/Screenshot 2024-05-20 152657.png>)

- `-s: squeeze-blank`Bỏ những dòng trống ở đầu file.

   ![alt text](<../Images/Screenshot 2024-05-20 152842.png>) 

- `-E: shows end` Thêm `$` vào cuối dòng

   ![alt text](<../Images/Screenshot 2024-05-20 153603.png>)

### 12. Lệnh `tail`
- Dùng để in ra các dòng cuối cùng của file 

  ```
  tail <filename>
  ```

   ![alt text](<../Images/Screenshot 2024-05-20 154626.png>)

- `-n: munber` dùng để xác định số dòng cuối cùng in ra
   
   ```
   tail -n <filename>
   ```

    ![alt text](<../Images/Screenshot 2024-05-20 155029.png>)

   Có thể không cần kí tự n 
 
   Sừ dụng `+` để in ra số dòng bắt đầu đến hết

    ![alt text](<../Images/Screenshot 2024-05-20 155331.png>)

- `-v` in ra số lương dòng kèm theo tên file

    ![alt text](<../Images/Screenshot 2024-05-20 155901.png>)


### 13.

         


     
   
   
        
    
    


    
   

   
     


        






    


        
  










